from gpt4all import GPT4All
import os
import textwrap
from dotenv import load_dotenv

load_dotenv()
MODEL_PATH = os.getenv("MODEL_PATH")

class ChatBot:
    def __init__(self):
        self.model = GPT4All(MODEL_PATH)
        self.chat_history = []
        self.min_response_length = 10
        self.max_response_length = 200

    def format_response(self, text):
        """Formats response with proper wrapping and minimum length"""
        if not text.strip():
            return "I don't have an answer for that. Could you ask differently?"

        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π –æ—Å–º–∏—Å–ª–µ–Ω–∏–π —Ä–µ—á–µ–Ω–Ω—è
        text = text.strip().split(".")[0] + "."

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–æ–≤–≥–∏–π
        if len(text) < self.min_response_length:
            text += " (Verified fact)"

        # –û–±—Ä—ñ–∑–∞—î–º–æ, —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
        if len(text) > self.max_response_length:
            text = text[:self.max_response_length - 3] + "..."

        return textwrap.fill(text, width=50)

    def print_response(self, response):
        """Prints response in a properly sized box"""
        lines = response.split('\n')
        max_length = max(len(line) for line in lines)

        print("\n‚îå" + "‚îÄ" * (max_length + 2) + "‚îê")
        for line in lines:
            print("‚îÇ " + line.ljust(max_length) + " ‚îÇ")
        print("‚îî" + "‚îÄ" * (max_length + 2) + "‚îò\n")

    def generate_response(self, prompt):
        try:
            # print(f"DEBUG: Generating response for prompt: {prompt}")
            response = self.model.generate(prompt, max_tokens=100, temp=0.2)  # –ú–µ–Ω—à–µ —Ç–æ–∫–µ–Ω—ñ–≤ —ñ –Ω–∏–∂—á–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            # print(f"DEBUG: Raw response: {response}")
            return self.format_response(response)
        except Exception as e:
            return f"Error generating response: {str(e)}"

    def run(self):
        print("üü¢ –ß–∞—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π! –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ 'exit' –¥–ª—è –≤–∏—Ö–æ–¥—É.\n")

        while True:
            try:
                user_input = input("üë§ –í–∏: ").strip()
                if not user_input:
                    continue

                if user_input.lower() == 'exit':
                    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
                    break

                self.chat_history.append({"role": "user", "content": user_input})

                # Use last 2 exchanges for context
                context = "\n".join(
                    f"{msg['role']}: {msg['content']}"
                    for msg in self.chat_history[-4:]
                )

                response = self.generate_response(context)
                self.chat_history.append({"role": "assistant", "content": response})
                self.print_response(response)

            except KeyboardInterrupt:
                print("\nüõë –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
                break
            except Exception as e:
                print(f"\n‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
                continue

if __name__ == "__main__":
    bot = ChatBot()
    bot.run()
